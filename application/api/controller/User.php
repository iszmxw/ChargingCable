<?php
/**
 * --------------------------------------------------
 * 空间类型   用户个人中心控制器
 * --------------------------------------------------
 * Copyright(c) 2017 时代万网 www.agewnet.com
 * --------------------------------------------------
 * 开发人员: lichao  <729167563@qq.com>
 * --------------------------------------------------
 */

namespace app\api\controller;

use app\common\logic\Message;
use app\common\logic\UsersLogic;
use app\common\model\MenuCfg;
use app\common\model\UserAddress;
use app\common\model\UserMessage;
use think\Db;
use think\Log;
use think\Loader;
use think\Page;
use app\api\logic\PayLogic;

class User extends Base
{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    //代理中心接口
    public function agency_center()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $user_id = $this->user_id;


        //查找头像，昵称，零钱，级别，总订单金额，我的设备数量
        $user = M("users")->where(['user_id' => $user_id])->field("nickname,head_pic,level,user_money")->find();
        //查找租借中的设备数量
        $num        = 0;//使用中的设备数量
        $orderarr   = [];//使用中的订单id数组
        $money      = 0;//订单总金额
        $number_num = 0;//我的设备台数
        $arrs       = [];//我的设备数组
        $one_leve   = "80";
        $one_leve   = M("lc_apply")->where(['user_id' => $user_id])->value("one_level");
        if ($one_leve == 0) {
            $one_leve = M("lc_subcommission")->where(['id' => 1])->value("agent");
        }

        if ($user['level'] == 5) {//总代
            //查找总代下面的所有分代user_id,和酒店user_id
            $equipment = M("lc_apply")->where(['entry_uid' => $user_id])->field("user_id")->select();
            //查找下面绑定的所有设备array('level' => ["in", "1,2,3"])     $cart_ids = explode(",",$cart_ids);
            $arr = array();
            if ($equipment) {
                foreach ($equipment as $k => $v) {
                    $arr[] = $v['user_id'];
                }
                if ($arr) {
                    $uid_string = implode(",", $arr);
                    //查找出所有该分代及酒店绑定的设备
                    $lc_equipment_number = M("lc_equipment_number")->where(array('j_user_id' => ["in", $uid_string]))->whereor(array('f_user_id' => ["in", $uid_string]))->field("number")->group("number")->select();
                    if ($lc_equipment_number) {
                        foreach ($lc_equipment_number as $key => $val) {
                            $arrs[] = $val['number'];
                        }
                        //查找10小时前，设备数组中正在使用的设备
                        $hourtime = strtotime(date("Y-m-d H:i:s", strtotime("-10 hour")));
                        $order    = M("power_order")->where("pay_status=2 AND pay_time>$hourtime")->field("time,id,pay_time,number")->select();
                        //查找全部订单
                        $arrs_id = implode(",", $arrs);
                        $money   = M("power_order")->where(array('number' => ["in", $arrs_id], 'pay_status' => 2, 'status' => ['neq', 1]))->sum("pay_price");
                        //我的设备台数
                        $number_num = count($arrs);
                        if ($order) {

                            foreach ($order as $ke => $va) {
                                //查找使用中的订单设备
                                $time  = time();
                                $times = $va['pay_time'] + $va['time'] * 60;
                                if ($times > $time && in_array($va['number'], $arrs)) {
                                    $orderarr[] = $va['id'];
                                }
                            }
                            if ($orderarr) {
                                $num = count($orderarr);
                            }
                        }
                    }

                }
            }
            /* $lc_equipment_number = M("lc_equipment_number")->where(array('f_user_id'=>$user_id))->field("number")->group("number")->select();
             if($lc_equipment_number) {
                 foreach ($lc_equipment_number as $key => $val) {
                     $arrs[] = $val['number'];
                 }
                 //查找10小时前，设备数组中正在使用的设备
                 $hourtime = strtotime(date("Y-m-d H:i:s", strtotime("-10 hour")));
                 $order = M("power_order")->where("pay_status=2 AND pay_time>$hourtime")->field("time,id,pay_time,number")->select();
                 //查找全部订单
                 $arrs_id = implode(",",$arrs);
                 $money = M("power_order")->where(array('number' => ["in",$arrs_id],'pay_status'=>2))->sum("pay_price");
                 //我的设备台数
                 $number_num = count($arrs);
                 if($order){

                     foreach($order as $ke=>$va){
                         //查找使用中的订单设备
                         $time = time();
                         $times = $va['pay_time'] + $va['time'] * 60;
                         if($times > $time && in_array($va['number'],$arrs)){
                             $orderarr[] = $va['id'];
                         }
                     }
                     if($orderarr){
                         $num = count($orderarr);
                     }
                 }
             }*/
        } elseif ($user['level'] == 4) {//分代
            //查找出所有该分代及酒店绑定的设备
            $lc_equipment_number = M("lc_equipment_number")->where(array('f_user_id' => $user_id))->field("number")->group("number")->select();
            if ($lc_equipment_number) {
                foreach ($lc_equipment_number as $key => $val) {
                    $arrs[] = $val['number'];
                }
                //查找10小时前，设备数组中正在使用的设备
                $hourtime = strtotime(date("Y-m-d H:i:s", strtotime("-10 hour")));
                $order    = M("power_order")->where("pay_status=2 AND pay_time>$hourtime")->field("time,id,pay_time,number")->select();
                //查找全部订单
                $arrs_id = implode(",", $arrs);
                $money   = M("power_order")->where(array('number' => ["in", $arrs_id], 'pay_status' => 2, 'status' => ['neq', 1]))->sum("pay_price");
                //我的设备台数
                $number_num = count($arrs);
                if ($order) {
                    foreach ($order as $ke => $va) {
                        //查找使用中的订单设备
                        $time  = time();
                        $times = $va['pay_time'] + $va['time'] * 60;
                        if ($times > $time && in_array($va['number'], $arrs)) {
                            $orderarr[] = $va['id'];
                        }
                    }
                    if ($orderarr) {
                        $num = count($orderarr);
                    }
                }
            }
        } elseif ($user['level'] == 3) {//酒店
            //查找出所有该分代及酒店绑定的设备
            $lc_equipment_number = M("lc_equipment_number")->where(array('j_user_id' => $user_id))->field("number")->group("number")->select();
            if ($lc_equipment_number) {
                foreach ($lc_equipment_number as $key => $val) {
                    $arrs[] = $val['number'];
                }
                //查找10小时前，设备数组中正在使用的设备
                $hourtime = strtotime(date("Y-m-d H:i:s", strtotime("-10 hour")));
                $order    = M("power_order")->where("pay_status=2 AND pay_time>$hourtime")->field("time,id,pay_time,number")->select();
                //查找全部订单
                $arrs_id = implode(",", $arrs);
                $money   = M("power_order")->where(array('number' => ["in", $arrs_id], 'pay_status' => 2, 'status' => ['neq', 1]))->sum("pay_price");
                //我的设备台数
                $number_num = count($arrs);
                if ($order) {
                    foreach ($order as $ke => $va) {
                        //查找使用中的订单设备
                        $time  = time();
                        $times = $va['pay_time'] + $va['time'] * 60;
                        if ($times > $time && in_array($va['number'], $arrs)) {
                            $orderarr[] = $va['id'];
                        }
                    }
                    if ($orderarr) {
                        $num = count($orderarr);
                    }
                }
            }
        }
        if ($user['user_money'] < 0) {
            $user['user_money'] = 0;
        }
        $data = array(
            'user_detail' => $user,
            'use_num'     => $num,
            'orderarr'    => $orderarr,
            'money'       => $money,
            'number_num'  => $number_num,
            'arrs'        => $arrs,
            'one_level'   => $one_leve
        );
        return returnOk($data);
    }

    //提现规则接口
    public function wendit_system()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        //查询提现条件
        $config = tpCache('cash');
        $data   = array(
            'min_cash'   => $config['min_cash'],
            'cash_times' => $config['cash_times']
        );
        return returnOk($data);
    }

    //提现提交接口
    public function wendit()
    {

        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $user_id = $this->user_id;
        $post    = I('post.');
        //微信账号，姓名，金额
        $werchat = $post['werchat'];
        if (empty($werchat)) {
            return returnBad('微信账号不能为空！！', 302);
        }
        $username = $post['username'];
        if (empty($username)) {
            return returnBad('姓名不能为空！！', 302);
        }
        $money      = $post['money'];
        $user_money = M("users")->where(['user_id' => $user_id])->value("user_money");
        if ($user_money < $money) {
            return returnBad('可提现额度不足！！', 302);
        }
        //查询提现条件
        $config = tpCache('cash');
        if ($money < $config['min_cash']) {
            return returnBad('最低提现额度不能小于' . $config['min_cash'], 302);
        }
        //每天可提现次数 $config['cash_times']
        $t     = time();
        $start = mktime(0, 0, 0, date("m", $t), date("d", $t), date("Y", $t));
        //查找用户今天总共提现的次数
        $num = M("withdrawals")->where("user_id=$user_id AND create_time>$start")->count();
        if ($num > $config['cash_times']) {
            return returnBad('今天的提现次数已经用完了，请明天再来吧！', 302);
        }
        //添加提现记录
        $arr = array(
            'user_id'     => $user_id,
            'money'       => $money,
            'type'        => 1,
            'create_time' => time(),
            'bank_card'   => $werchat,
            'realname'    => $username,
        );
        if (M("withdrawals")->add($arr)) {
            //用余额减提现金额
            M("users")->where(['user_id' => $user_id])->setDec("user_money", $money);
            //冻结金额加提现金额
            M("users")->where(['user_id' => $user_id])->setInc("frozen_money", $money);
            return returnOk("提现提交成功！");
        } else {
            return returnBad('网络错误', 302);
        }
    }


    //租借中的列表详情
    public function lease_list()
    {
        $page = I('page', 1);
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $arr   = I('orderarr');
        $order = [];
        $count = 0;
        if ($arr) {
            $arrs_id = $arr;
            //查找全部订单
            $order = M("power_order")->where(array('id' => ["in", $arrs_id]))->field("pay_time,number,time,pay_price")->limit(($page - 1) * 10, 10)->select();
            $count = M("power_order")->where(array('id' => ["in", $arrs_id]))->count();
            if ($order) {
                foreach ($order as $k => $v) {
                    //查找设备对应的酒店名称
                    $hotel                   = M("lc_equipment_number")->where(array('number' => $v['number']))->field("hotel_name")->find();
                    $order[$k]['hotel_name'] = $hotel['hotel_name'];
                    $order[$k]['use_time']   = $v['time'] / 60;
                    $order[$k]['pay_time']   = date('Y-m-d H:i:s', $v['pay_time']);
                }
            }
        }
        $data = array(
            'list'  => $order,
            'count' => $count
        );
        return returnOk($data);
    }


    //总订单列表
    public function total_order_list()
    {
        $page = I('page', 1);
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $arr   = I('arras');
        $order = [];
        $count = 0;
        if ($arr) {
            $arrs_id = $arr;
            //查找全部订单
            $order = M("power_order")->where(array('number' => ["in", $arrs_id], 'pay_status' => 2))->field("pay_time,number,pay_price,status")->order("pay_time desc")->limit(($page - 1) * 10, 10)->select();
            $count = M("power_order")->where(array('number' => ["in", $arrs_id], 'pay_status' => 2))->count();
            if ($order) {
                foreach ($order as $k => $v) {
                    //查找设备对应的酒店名称
                    $hotel = M("lc_equipment_number")->where(array('number' => $v['number']))->field("hotel_name")->find();
                    if ($v['status'] == 1) {
                        $order[$k]['hotel_name'] = $hotel['hotel_name'] . '(备注：已退款)';
                    } else {
                        $order[$k]['hotel_name'] = $hotel['hotel_name'];
                    }

                    $order[$k]['pay_time'] = date('Y-m-d H:i:s', $v['pay_time']);
                }
            }
        }
        $data = array(
            'list'  => $order,
            'count' => $count
        );
        return returnOk($data);
    }

    // 总订单列表==>免费设备模式的订单
    public function total_order_list_free()
    {
        $page = I('page', 1);
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $arr   = I('arras');
        $order = [];
        $count = 0;
        if ($arr) {
            $arrs_id = $arr;
            //查找全部订单
            $order = M("power_order_free")->where(array('number' => ["in", $arrs_id], 'pay_status' => 2))->field("pay_time,number,pay_price")->order("pay_time desc")->limit(($page - 1) * 10, 10)->select();
            $count = M("power_order_free")->where(array('number' => ["in", $arrs_id], 'pay_status' => 2))->count();
            if ($order) {
                foreach ($order as $k => $v) {
                    //查找设备对应的酒店名称
                    $hotel                   = M("lc_equipment_number")->where(array('number' => $v['number']))->field("hotel_name")->find();
                    $order[$k]['hotel_name'] = $hotel['hotel_name'];
                    $order[$k]['pay_time']   = date('Y-m-d H:i:s', $v['pay_time']);
                }
            }
        }
        $data = array(
            'list'  => $order,
            'count' => $count
        );
        return returnOk($data);
    }

    //我的酒店列表
    public function my_hotel()
    {
        $page = I('page', 1);
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $uid = I('post.user_id');
        if ($uid) {
            $this->user_id = $uid;
        }
        //查找出所有绑定的酒店名称
        $level = M("users")->where(['user_id' => $uid])->value('level');
        if ($level == 5) {
            //查找所有下级分销商array('level' => ["in", "1,2,3"])     $cart_ids = explode(",",$cart_ids);
            $arr   = M("lc_apply")->where(['entry_uid' => $uid, 'type' => 4])->field("user_id")->select();
            $array = [];
            if ($arr) {
                foreach ($arr as $k => $v) {
                    $array[] = $v['user_id'];
                }
                $str   = implode(",", $array);
                $str   = $str . ',' . $uid;
                $app   = M("lc_apply")->where(['entry_uid' => ["in", $str], 'type' => 3])->field("id,user_id,hotel_name")->limit(($page - 1) * 10, 10)->select();
                $count = M("lc_apply")->where(['entry_uid' => ["in", $str], 'type' => 3])->count();
            } else {
                $app   = M("lc_apply")->where(['entry_uid' => $uid, 'type' => 3])->field("id,user_id,hotel_name")->limit(($page - 1) * 10, 10)->select();
                $count = M("lc_apply")->where(['entry_uid' => $uid, 'type' => 3])->count();
            }


        } else {
            $app   = M("lc_apply")->where(['entry_uid' => $this->user_id, 'type' => 3])->field("id,user_id,hotel_name")->limit(($page - 1) * 10, 10)->select();
            $count = M("lc_apply")->where(['entry_uid' => $this->user_id, 'type' => 3])->count();
        }
        $total_money = 0;
        if ($app) {

            foreach ($app as $k => $v) {
                //查找头像
                $head_pic            = M("users")->where(['user_id' => $v['user_id']])->getField("head_pic");
                $app[$k]['head_pic'] = $head_pic;
                //查找设备数量
                $app[$k]['num'] = M("lc_equipment_number")->where(array("j_user_id" => $v['user_id']))->count();
                //查询设备销售业绩
                $seb = M("lc_equipment_number")->where(array("j_user_id" => $v['user_id']))->field("number")->select();
                if ($seb) {
                    $number_arr = [];
                    foreach ($seb as $key => $val) {
                        $number_arr[] = $val['number'];
                    }
                    //查找全部订单
                    $arrs_id          = implode(",", $number_arr);
                    $app[$k]['money'] = M("power_order")->where(array('number' => ["in", $arrs_id], 'pay_status' => 2))->sum("pay_price");
                    $total_money      = $total_money + $app[$k]['money'];
                } else {
                    $app[$k]['money'] = 0;
                }

            }
        }

        $data = array('total' => $total_money, 'list' => $app, 'count' => $count);
        return returnOk($data);

    }

    //酒店编辑获得酒店数据
    public function hotel_data()
    {
        $data = I('post.');
        if (empty($data['id'])) {
            return returnBad('参数缺失', 302);
        }

        $user_id        = $this->user_id;
        $fire_one_level = M("lc_apply")->where(['user_id' => $user_id])->value("one_level");
        if ($fire_one_level == 0) {
            $fire_one_level = M("lc_subcommission")->where(['id' => 1])->value("agent");
        }
        $list                   = M("lc_apply")->where(['id' => $data['id']])->field("id,username,mobile,wx_number,hotel_name,one_level,one_hour,three_hour,ten_hour,entry_uid")->find();
        $list['fire_one_level'] = $fire_one_level;
        return returnOk($list);
    }

    //酒店编辑提交数据接口
    public function hotel_data_Submission()
    {
        $data = I('post.');
        if (empty($data['id'])) {
            return returnBad('参数缺失', 302);
        }
        $list = M("lc_apply")->where(['id' => $id])->find();
        //更改的总分成不能大于分销的分成
        $hotel_fc = M("lc_apply")->where(['user_id' => $list['entry_uid']])->value("one_level");
        if ($hotel_fc == 0) {
            $hotel_fc = M("lc_subcommission")->where(['id' => 1])->value("agent");
        }
        if ($date['one_level'] > $hotel_fc) {
            return returnBad('"修改失败，酒店分成不能大于代理总分成~"' . $hotel_fc . '%', 302);
        }
        $result = M('lc_apply')->where(['id' => $data['id']])->save($data);
        return returnOk("修改成功");
    }

    //删除酒店
    public function hotel_del()
    {
        $data = I('post.');
        if (empty($data['id'])) {
            return returnBad('参数缺失', 302);
        }
        //1.删除收益记录，删除绑定设备，删除添加记录，身份改为会员
        $user_id = M("lc_apply")->where(['id' => $data['id']])->value("user_id");
        // M("shou_log")->where(['user_id'=>$user_id])->delete();
        M("lc_equipment_number")->where(['j_user_id' => $user_id])->delete();
        $r     = M('lc_apply')->where(['id' => $data['id']])->delete();
        $level = M("users")->where(['user_id' => $user_id])->value("level");
        if ($level == 3) {
            M("users")->where(['user_id' => $user_id])->save(['level' => 2]);
        }
        if ($r) {
            return returnOk("删除成功！！");
        } else {
            return returnBad('网络错误！！', 302);
        }
    }


    //总代设备绑定获取我的团队接口接口
    public function agent_trun()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        //查找所有的分销商
        $trun = M("lc_apply")->where(['entry_uid' => $this->user_id, 'type' => 4])->field("username,mobile,user_id")->select();
        //查找所有的酒店
        $hotel = M("lc_apply")->where(['entry_uid' => $this->user_id, 'type' => 3])->field("hotel_name,username,mobile,user_id")->select();
        $data  = array(
            'distributor_list' => $trun,
            'hotel_list'       => $hotel,
        );
        return returnOk($data);
    }

    //设备绑定提交接口
    public function agent_binding()
    {
        vendor('phpqrcode.phpqrcode');
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $type              = I('type', 1);
        $data['j_user_id'] = I('hotel_user_id');
        if (empty($data['j_user_id'])) {
            return returnBad('缺少酒店参数！！', 302);
        }
        $data['number'] = I('number');
        if (empty($data['number'])) {
            return returnBad('缺少设备编号！！', 302);
        }
        $data['f_user_id']       = I('agent_user_id');
        $data['hotel_name']      = I('hotel_name');
        $data['secret_key']      = 'JDX888';
        $data['time']            = time();
        $data['password_number'] = '01';
        $data['pack_id']         = 3;

        // //判断本次添加的设备是否已存在
        //判断本次添加的设备是否已存在
        $id = M('lc_equipment_number')->where(['number' => $data['number']])->value('id');
        if ($id) {
            return returnBad('设备已存在');
            exit;
        }
        if ($type == 1) {
            $data['f_user_id'] = $this->user_id;
        }
        $data['admin'] = M('users')->where(['user_id' => $this->user_id])->value('username');
        $result        = M("lc_equipment_number")->add($data);
        if ($result) {
            //生成设备二维码
            $value                = 'http://' . $_SERVER['HTTP_HOST'] . '/index.php/api/login/index?index=0&number=' . $data['number']; //二维码内容
            $errorCorrectionLevel = 'L';//容错级别
            $matrixPointSize      = 6;//生成图片大小
            $path                 = UPLOAD_PATH . date("Ymd", time()) . '/';
            if (!is_dir($path)) {
                mkdir($path);
            }
            $Object    = new \QRcode();
            $rand      = substr(implode(NULL, array_map('ord', str_split(substr(uniqid(), 7, 13), 1))), 0, 8) . rand(9999, 99999) . $this->user_id;
            $file_name = $path . $rand . 'code.jpg';
            $Object->png($value, $file_name, $errorCorrectionLevel, $matrixPointSize, 2);
            M("lc_equipment_number")->where(['id' => $result])->update(array('ewm' => $file_name));

            return returnOk("绑定成功！！");
            exit;
        } else {
            return returnBad('网络错误！！');
            exit;
        }

    }


    /**
     * 验证手机号是否正确
     * @param number $mobile
     * @author honfei
     */
    public function isMobile($mobile)
    {
        if (!is_numeric($mobile)) {
            return false;
        }
        return preg_match('#^13[\d]{9}$|^14[5,7]{1}\d{8}$|^15[^4]{1}\d{8}$|^17[0,6,7,8]{1}\d{8}$|^18[\d]{9}$#', $mobile) ? true : false;
    }

    //添加代理
    public function add_proxy()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $user = M("users")->where(['user_id' => $this->user_id])->find();
        //姓名。联系电话。微信号，身份证号码。申请区域，详细地址
        $post = I('post.'); //接收提交信息
        if (empty($post['username'])) {
            return returnBad('姓名不能为空！');
        }
        $data['username'] = $post['username'];
        if (empty($post['mobile'])) {
            return returnBad('手机号码不能为空！');
        }
        //验证手机号码
        $match = $this->isMobile($post['mobile']);
        if (!$match) {
            return returnBad('手机号码格式错误！');
        }
        //查找是否有这个手机号的用户
        $member = M("users")->where(['mobile' => $post['mobile']])->find();
        if (!$member) {
            return returnBad('未找到该手机号下的用户！');
        }
        $data['mobile'] = $post['mobile'];
        if (empty($post['wx_number'])) {
            return returnBad('微信号不能为空！');
        }
        $data['wx_number'] = $post['wx_number'];


//        if (empty($post['code_id'])) {
//            return returnBad('身份证号码不能为空！');
//        }
//        //验证身份证
//        $str = strlen($post['code_id']);
//        if ($str != 18) {
//            return returnBad('身份证号码错误！');
//        }
        $data['code_id'] = $post['code_id'];
        if (empty($post['region'])) {
            return returnBad('请填写区域！');
        }
        $data['region'] = $post['region'];

        if (empty($post['address'])) {
            return returnBad('请填详细地址！');
        }
        $data['address'] = $post['address'];

        if (empty($post['one_level'])) {
            return returnBad('请选择代理分成比例！');
        }
        //查找可选择的分成总份额
        $f_level = M("users")->where(['user_id' => $this->user_id])->value('agent_f');
        $agent   = intval($f_level);
        if ($agent == 0) {
            $agent = M("lc_subcommission")->where(['id' => 1])->value("agent");
        }

        if ($agent < $post['one_level']) {
            return returnBad('代理分成,不能超过' . $agent . '%');
        }

        $data['one_level'] = $post['one_level'];

        $data['jurisdiction'] = $post['jurisdiction'];

        $data['type'] = 4;

        $data['user_id'] = $member['user_id'];
        //判断是否已存在该代理
        $apply = M("lc_apply")->where(['mobile' => $data['mobile']])->count();
        if ($apply > 0) {
            return returnBad('代理已存在！！');
        }


        $data['create_time'] = time();
        $data['time']        = time();
        $data['status']      = 2;
        $data['admin']       = $user['username'];
        $data['entry_uid']   = $this->user_id;
        $data['entry_level'] = $user['level'];
        $res                 = M("lc_apply")->add($data);

        if ($res) {
            M("users")->where(['user_id' => $member['user_id']])->save(['level' => 4]);
            return returnOk('添加成功！！');
        } else {
            return returnBad('网络错误！！');
        }
    }


    // 添加酒店获取我的团队接口接口
    public function hotelagent_trun()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        //查找所有的分销商
        $trun = M("lc_apply")->where(['entry_uid' => $this->user_id, 'type' => 4])->field("username,mobile,user_id,one_level,one_level_free")->select();

        $data = array(
            'distributor_list' => $trun,
        );
        return returnOk($data);
    }


    //地址图片上传
    public function Update_img()
    {
        header('Content-type: application/json;charset=utf-8');
        $post    = I('post.');
        $dirPath = "./public/images/" . date("Ymd", time()) . '/';//设置文件保存的目录
        if (empty($_FILES)) {
            return returnBad('图片提交失败！！');
        }
        if (!is_dir($dirPath)) {
            //目录不存在则创建目录
            @mkdir($dirPath);
        }
        $count = count($_FILES);//所有文件数
        if ($count < 1) return returnBad('图片提交失败！！');//没有提交的文件
        foreach ($_FILES as $key => $value) {
            //循环遍历数据
            $tmp     = $value['name'];//获取上传文件名
            $tmpName = $value['tmp_name'];//临时文件路径
            //上传的文件会被保存到php临时目录，调用函数将文件复制到指定目录
            if (move_uploaded_file($tmpName, $dirPath . date('YmdHis') . '_' . $tmp)) {
                $dirPaths = "/public/images/" . date("Ymd", time()) . '/';//设置文件保存的目录
                $arr[]    = $dirPaths . date('YmdHis') . '_' . $tmp;
            }
        }
        $pic  = 'http://' . $_SERVER['HTTP_HOST'] . $arr[0];
        $data = array(
            'img_url'   => $pic,
            'hotel_img' => $arr[0]
        );
        return returnOk($data);
    }


    // 添加酒店
    public function add_hotel()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $user = M("users")->where(['user_id' => $this->user_id])->find();
        // 姓名。联系电话。微信号，身份证号码。申请区域，详细地址
        $post = I('post.'); // 接收提交信息
        if (empty($post['username'])) {
            return returnBad('姓名不能为空！');
        }
        $data['username'] = $post['username'];
        if (empty($post['mobile'])) {
            return returnBad('手机号码不能为空！');
        }
        // 验证手机号码
        $match = $this->isMobile($post['mobile']);
        if (!$match) {
            return returnBad('手机号码格式错误！');
        }
        // 查找是否有这个手机号的用户
        $member = M("users")->where(['mobile' => $post['mobile']])->find();
        if (!$member) {
            return returnBad('未找到该手机号下的用户！');
        }
        $data['mobile'] = $post['mobile'];
        if (empty($post['wx_number'])) {
            return returnBad('微信号不能为空！');
        }
        $data['wx_number'] = $post['wx_number'];
        if (empty($post['hotel_name'])) {
            return returnBad('酒店名称不能为空！');
        }
        $data['hotel_name'] = $post['hotel_name'];
//        // 验证身份证
//        if (empty($post['code_id'])) {
//            return returnBad('身份证号码不能为空！');
//        }
//        $str = strlen($post['code_id']);
//        if ($str != 18) {
//            return returnBad('身份证号码错误！');
//        }
//        $data['code_id'] = $post['code_id'];
        if (empty($post['region'])) {
            return returnBad('请填写区域！');
        }
        if (empty($post['one_level'])) {
            return returnBad('请选择代理默认模式分成比例！');
        }
        if (empty($post['one_level_free'])) {
            return returnBad('请选择代理免费模式分成比例！');
        }
        $data['one_level']      = $post['one_level'];
        $data['one_level_free'] = $post['one_level_free'];
        //判断当前用户身份
        $level = M("users")->where(['user_id' => $this->user_id])->value('level');
        if ($level == 4) {
            $agent = M("lc_apply")->where(['user_id' => $this->user_id])->value("one_level");
            if ($agent < $post['one_level']) {
                return returnBad('酒店分成,不能超过' . $agent . '%');
            }
        } elseif ($level == 5) {
            if ($post['types'] == 2) {//给团队下面的人添加酒店
                $users_ids = $post['user_ids'];
                $one_level = M("lc_apply")->where(['user_id' => $users_ids])->value('one_level');
                $total     = intval($one_level);
                if ($total < $post['one_level']) {
                    return returnBad('酒店分成,不能超过' . $total . '%');
                }
            } else {
                $f_level = M("users")->where(['user_id' => $this->user_id])->value('agent_f');
                $agent   = intval($f_level);
                if ($agent == 0) {
                    $agent = M("lc_subcommission")->where(['id' => 1])->value("agent");
                }
                if ($agent < $post['one_level']) {
                    return returnBad('酒店分成,不能超过' . $agent . '%');
                }
            }

        }

        $data['region'] = $post['region'];

        $data['type']    = 3;
        $data['user_id'] = $member['user_id'];
        //判断是否已存在该酒店
        $apply = M("lc_apply")->where(['mobile' => $data['mobile']])->count();
        if ($apply > 0) {
            return returnBad('用户已有身份！！');
        }
        if (empty($post['jd'])) {
            return returnBad('地理经度不能为空！');
        }
        $data['jd'] = $post['jd'];
        if (empty($post['wd'])) {
            return returnBad('地理纬度不能为空！');
        }
        $data['wd'] = $post['wd'];

        $data['create_time'] = time();
        $data['time']        = time();
        $data['status']      = 2;
        $data['admin']       = $user['username'];
        $data['entry_uid']   = $this->user_id;
        $data['entry_level'] = $user['level'];
        if ($post['types'] == 2) {//给团队下面的人添加酒店
            $data['entry_uid']   = $post['user_ids'];
            $data['entry_level'] = M("users")->where(['user_id' => $data['entry_uid']])->value('level');
        }
        $data['one_hour']   = $post['one_hour'];
        $data['three_hour'] = $post['three_hour'];
        $data['ten_hour']   = $post['ten_hour'];
        $res                = M("lc_apply")->add($data);
        if ($res) {
            M("users")->where(['user_id' => $member['user_id']])->save(['level' => 3]);
            return returnOk('添加成功！！');
        } else {
            return returnBad('网络错误！！');
        }
    }

    // 我的设备列表
    public function number_list()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $list  = [];
        $page  = I('page', 1);
        $arrs  = I('arrs');
        $level = M("users")->where(['user_id' => $this->user_id])->value("level");
        $count = 0;
        if ($level == 3) {
            $list  = M("lc_equipment_number")->where(['number' => ['in', $arrs]])->field("id,number,mode_type,hotel_name,time")->order("time desc")->limit(($page - 1) * 10, 10)->select();
            $count = M("lc_equipment_number")->where(['number' => ['in', $arrs]])->count();
        } elseif ($level == 4) {
            $list  = M("lc_equipment_number")->where(['number' => ['in', $arrs]])->field("id,number,mode_type,hotel_name,time")->order("time desc")->limit(($page - 1) * 10, 10)->select();
            $count = M("lc_equipment_number")->where(['number' => ['in', $arrs]])->count();
        } elseif ($level == 5) {
            //查找总代下面的所有分代user_id,和酒店user_id
            //查找出所有该分代及酒店绑定的设备
            $list  = M("lc_equipment_number")->where(['number' => ['in', $arrs]])->order("time desc")->field("id,number,mode_type,hotel_name,time")->group("number")->limit(($page - 1) * 10, 10)->select();
            $count = M("lc_equipment_number")->where(['number' => ['in', $arrs]])->count();
        }
        if (!empty($list)) {
            foreach ($list as $k => $v) {
                $list[$k]['time'] = date('Y-m-d H:i:s', $v['time']);
            }
        }
        $data = array(
            'list'  => $list,
            'count' => $count
        );
        return returnOk($data);
    }

    //删除设备
    public function number_del()
    {
        $post = I("post.");

        if (empty($post['id'])) {
            return returnBad('参数缺失', 302);
        }
        //1.删除收益记录，删除绑定设备，删除添加记录，身份改为会员
        $number = M('lc_equipment_number')->where(['id' => $post['id']])->value("number");
        M("shou_log")->where(['number' => $number])->delete();
        $r = M('lc_equipment_number')->where(['id' => $post['id']])->delete();
        if ($r) {
            return returnOk("删除成功！！");
        } else {
            return returnBad('网络错误！！', 302);
        }

    }

    // 收益统计
    public function revenue_statistics()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $user_id = $this->user_id;
        //我的设备数组
        $arr              = I('arrs');
        $today_order      = 0;
        $today_order_free = 0;
        // 当天开始和结束时间戳
        $t     = time();
        $start = mktime(0, 0, 0, date("m", $t), date("d", $t), date("Y", $t));
        $end   = mktime(23, 59, 59, date("m", $t), date("d", $t), date("Y", $t));

        //今日订单
        if ($arr) {
            $today_order      = M("power_order")->where(array('number' => ["in", $arr], 'pay_status' => 2, 'pay_time' => ['gt', $start], 'status' => ['neq', 1]))->sum("pay_price");
            $today_order_free = M("power_order_free")->where(array('number' => ["in", $arr], 'pay_status' => 2, 'pay_time' => ['gt', $start]))->sum("pay_price");
        }
        // 今日收入
        $today_incom       = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$start AND type<4")->sum("allf_money");
        $today_incoms      = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$start AND type=4")->sum("allf_money");
        $today_incom       = $today_incom - $today_incoms;
        $today_incom_free  = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$start AND type<4")->sum("allf_money");
        $today_incoms_free = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$start AND type=4")->sum("allf_money");
        $today_incom_free  = $today_incom_free - $today_incoms_free;


        // 昨日收入
        // 当天开始和结束时间戳
        $beginYesterday         = mktime(0, 0, 0, date('m'), date('d') - 1, date('Y'));
        $endYesterday           = mktime(0, 0, 0, date('m'), date('d'), date('Y')) - 1;
        $lasttoday_income       = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$beginYesterday AND time<$endYesterday  AND type<4")->sum("allf_money");
        $lasttoday_incomes      = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$beginYesterday AND time<$endYesterday  AND type=4")->sum("allf_money");
        $lasttoday_income       = $lasttoday_income - $lasttoday_incomes;
        $lasttoday_income_free  = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$beginYesterday AND time<$endYesterday  AND type<4")->sum("allf_money");
        $lasttoday_incomes_free = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$beginYesterday AND time<$endYesterday  AND type=4")->sum("allf_money");
        $lasttoday_income_free  = $lasttoday_income_free - $lasttoday_incomes_free;


        //近七天收入
        $seven              = strtotime('-7 days');// 获得的是时间戳
        $seven_income       = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$seven  AND type<4")->sum("allf_money");
        $seven_incomes      = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$seven  AND type=4")->sum("allf_money");
        $seven_income       = $seven_income - $seven_incomes;
        $seven_income_free  = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$seven  AND type<4")->sum("allf_money");
        $seven_incomes_free = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$seven  AND type=4")->sum("allf_money");
        $seven_income_free  = $seven_income_free - $seven_incomes_free;


        //近一个月收入
        $month              = strtotime('-28 days');// 获得的是时间戳
        $month_income       = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$month  AND type<4")->sum("allf_money");
        $month_incomes      = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$month  AND type=4")->sum("allf_money");
        $month_income       = $month_income - $month_incomes;
        $month_income_free  = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$month  AND type<4")->sum("allf_money");
        $month_incomes_free = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$month  AND type=4")->sum("allf_money");
        $month_income_free  = $month_income_free - $month_incomes_free;

        //今年收益
        $begin_year        = strtotime(date("Y", time()) . "-1" . "-1"); //本年开始
        $year_income       = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$begin_year  AND type<4")->sum("allf_money");
        $year_incomes      = M("shou_log")->where("order_type=0 AND user_id=$user_id AND time>$begin_year  AND type=4")->sum("allf_money");
        $year_income       = $year_income - $year_incomes;
        $year_income_free  = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$begin_year  AND type<4")->sum("allf_money");
        $year_incomes_free = M("shou_log")->where("order_type=1 AND user_id=$user_id AND time>$begin_year  AND type=4")->sum("allf_money");
        $year_income_free  = $year_income_free - $year_incomes_free;

        $data = array(
            'today_order'           => $today_order,
            'today_order_free'      => $today_order_free,
            'today_incom'           => $today_incom,
            'today_incom_free'      => $today_incom_free,
            'lasttoday_income'      => $lasttoday_income,
            'lasttoday_income_free' => $lasttoday_income_free,
            'seven_income'          => $seven_income,
            'seven_income_free'     => $seven_income_free,
            'month_income'          => $month_income,
            'month_income_free'     => $month_income_free,
            'year_income'           => $year_income,
            'year_income_free'      => $year_income_free,
        );
        return returnOk($data);
    }


    //1:今日订单，2今日收入，3昨日收入，4近七天收入，5，近一月收入，6今年收益
    public function order_detail_list()
    {
        $type = I("post.type", 1);
        $page = I("post.page", 1);
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $user_id = $this->user_id;
        //我的设备数组
        $arr   = I('post.arrs');
        $data  = [];
        $count = 0;
        //当天开始和结束时间戳
        $t     = time();
        $start = mktime(0, 0, 0, date("m", $t), date("d", $t), date("Y", $t));
        $end   = mktime(23, 59, 59, date("m", $t), date("d", $t), date("Y", $t));
        if ($type == 1) {
            //今日订单
            if ($arr) {
                //酒店名称，时间，金额，设备号
                $data  = M("power_order")->where(array('number' => ["in", $arr], 'pay_status' => 2, 'pay_time' => ['gt', $start]))->field("pay_price,create_time,number")->order("create_time desc")->limit(($page - 1) * 10, 10)->select();
                $count = M("power_order")->where(array('number' => ["in", $arr], 'pay_status' => 2, 'pay_time' => ['gt', $start]))->count();
                if ($data) {
                    foreach ($data as $k => $v) {
                        $data[$k]['hotel_name']  = M("lc_equipment_number")->where(['number' => $v['number']])->value("hotel_name");
                        $data[$k]['create_time'] = date("Y-m-d H:i:s", $v['create_time']);
                        $data[$k]['allf_money']  = $v['pay_price'];
                    }
                    unset($k, $v);
                }
            }
        } elseif ($type == 2) {//今日收入
            $count = M("shou_log")->where("user_id=$user_id AND time>$start")->count();
            $data  = M("shou_log")->where("user_id=$user_id AND time>$start")->field("allf_money,order_sn,time")->order("time desc")->limit(($page - 1) * 10, 10)->select();
            if ($data) {
                foreach ($data as $k => $v) {
                    $data[$k]['number']      = M("power_order")->where(['order_sn' => $v['order_sn']])->value("number");
                    $data[$k]['hotel_name']  = M("lc_equipment_number")->where(['number' => $data[$k]['number']])->value("hotel_name");
                    $data[$k]['create_time'] = date("Y-m-d H:i:s", $v['time']);
                }
                unset($k, $v);
            }
        } elseif ($type == 3) {//昨日收入
            //昨日开始和结束时间戳
            $beginYesterday = mktime(0, 0, 0, date('m'), date('d') - 1, date('Y'));
            $endYesterday   = mktime(0, 0, 0, date('m'), date('d'), date('Y')) - 1;
            $count          = M("shou_log")->where("user_id=$user_id AND time>$beginYesterday AND time<$endYesterday")->count();
            $data           = M("shou_log")->where("user_id=$user_id AND time>$beginYesterday AND time<$endYesterday")->field("allf_money,order_sn,time")->order("time desc")->limit(($page - 1) * 10, 10)->select();
            if ($data) {
                foreach ($data as $k => $v) {
                    $data[$k]['number']      = M("power_order")->where(['order_sn' => $v['order_sn']])->value("number");
                    $data[$k]['hotel_name']  = M("lc_equipment_number")->where(['number' => $data[$k]['number']])->value("hotel_name");
                    $data[$k]['create_time'] = date("Y-m-d H:i:s", $v['time']);
                }
                unset($k, $v);
            }
        } elseif ($type == 4) {//近七天收入
            $seven = strtotime('-7 days');// 获得的是时间戳
            $count = M("shou_log")->where("user_id=$user_id AND time>$seven")->count();
            $data  = M("shou_log")->where("user_id=$user_id AND time>$seven")->field("allf_money,order_sn,time")->order("time desc")->limit(($page - 1) * 10, 10)->select();
            if ($data) {
                foreach ($data as $k => $v) {
                    $data[$k]['number']      = M("power_order")->where(['order_sn' => $v['order_sn']])->value("number");
                    $data[$k]['hotel_name']  = M("lc_equipment_number")->where(['number' => $data[$k]['number']])->value("hotel_name");
                    $data[$k]['create_time'] = date("Y-m-d H:i:s", $v['time']);
                }
                unset($k, $v);
            }

        } elseif ($type == 5) {//近一个月收入
            $month = strtotime('-28 days');// 获得的是时间戳
            $count = M("shou_log")->where("user_id=$user_id AND time>$month")->count();
            $data  = M("shou_log")->where("user_id=$user_id AND time>$month")->field("allf_money,order_sn,time")->order("time desc")->limit(($page - 1) * 10, 10)->select();
            if ($data) {
                foreach ($data as $k => $v) {
                    $data[$k]['number']      = M("power_order")->where(['order_sn' => $v['order_sn']])->value("number");
                    $data[$k]['hotel_name']  = M("lc_equipment_number")->where(['number' => $data[$k]['number']])->value("hotel_name");
                    $data[$k]['create_time'] = date("Y-m-d H:i:s", $v['time']);
                }
                unset($k, $v);
            }
        } elseif ($type == 6) {//今年收益
            $begin_year = strtotime(date("Y", time()) . "-1" . "-1"); //本年开始
            $count      = M("shou_log")->where("user_id=$user_id AND time>$begin_year")->count();
            $data       = M("shou_log")->where("user_id=$user_id AND time>$begin_year")->field("allf_money,order_sn,time")->order("time desc")->limit(($page - 1) * 10, 10)->select();
            if ($data) {
                foreach ($data as $k => $v) {
                    $data[$k]['number']      = M("power_order")->where(['order_sn' => $v['order_sn']])->value("number");
                    $data[$k]['hotel_name']  = M("lc_equipment_number")->where(['number' => $data[$k]['number']])->value("hotel_name");
                    $data[$k]['create_time'] = date("Y-m-d H:i:s", $v['time']);
                }
                unset($k, $v);
            }

        }
        $datas = array(
            'list'  => $data,
            'count' => $count
        );
        return returnOk($datas);


    }


    //代理商团队-团队接口
    public function my_trun()
    {
        $page = I('page', 1);
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $uid = $this->user_id;
        //查找用户当前的昵称和头像
        $users = M("users")->where(['user_id' => $uid])->field('nickname,head_pic')->find();
        //查找我直接下级是分销商的所有用户
        $equipment = M("lc_apply")->where(['entry_uid' => $uid, 'type' => 4])->field("user_id")->limit(($page - 1) * 10, 10)->select();
        //查找下面绑定的所有设备array('level' => ["in", "1,2,3"])     $cart_ids = explode(",",$cart_ids);
        $arr   = array();
        $num   = 0;
        $count = 0;
        $dist  = [];
        if ($equipment) {
            foreach ($equipment as $v) {
                $arr[] = $v['user_id'];
            }

            $user_ids = implode(",", $arr);

            $dist = M("users")->where(array('user_id' => ["in", $user_ids]))->limit(($page - 1) * 10, 10)->select();
            //我的团队人数
            $count = M("users")->where(array('user_id' => ["in", $user_ids]))->count();

            //查找我的总业绩

            if ($dist) {
                foreach ($dist as $k => $v) {
                    if ($v['username']) {
                        $dist[$k]['nickname'] = $v['username'];
                    }
                    $shou_log                = M("shou_log")->where(['user_id' => $v['user_id']])->sum('money');
                    $num                     = $num + $shou_log;
                    $dist[$k]['shou_number'] = $shou_log;//团队中个人总业绩
                }
            }
        }
        $data = array(
            'nickname'  => $users['nickname'],
            'head_pic'  => $users['head_pic'],
            'count'     => $count,
            'pages'     => $count,
            'num'       => $num,
            'trun_list' => $dist
        );
        return returnOk($data);

    }


    //总代理我的团队-编辑代理获取数据接口
    public function my_trun_data()
    {
        $data = I('post.');
        if (empty($data['user_id'])) {
            return returnBad('参数缺失', 302);
        }
        $user_id        = $this->user_id;
        $fire_one_level = M("lc_apply")->where(['user_id' => $user_id, 'type' => 5])->value("one_level");
        if ($fire_one_level == 0) {
            $fire_one_level = M("lc_subcommission")->where(['id' => 1])->value("agent");
        }
        $list                   = M("lc_apply")->where(['user_id' => $data['user_id'], 'type' => 4])->field("id,username,mobile,wx_number,code_id,one_level")->find();
        $list['fire_one_level'] = $fire_one_level;
        return returnOk($list);
    }


    //总代理我的团队-修改分销商
    public function distributor_edit()
    {
        $date = I('post.');
        $id   = $date['id'];
        if (empty($id)) {
            return returnBad('参数缺失', 302);
        }
        $list = M("lc_apply")->where(['id' => $id])->find();

        // 更改的总分成不能小于酒店的分成
        $hotel_fc = M("lc_apply")->where(['entry_uid' => $list['user_id'], 'type' => 3, 'one_level' => ['gt', 0]])->order("one_level asc")->value("one_level");
        if ($date['one_level'] < $hotel_fc) {
            return returnBad('修改失败，代理总分成不能小于酒店最低分成~' . $hotel_fc . '%', 302);
        }
        $result = M('lc_apply')->where(['id' => $date['id']])->save($date);
        return returnOk("修改成功！！");
    }


    //删除我的团队-代理接口
    public function my_trun_del()
    {
        $data = I('post.');
        if (empty($data['user_id'])) {
            return returnBad('参数缺失', 302);
        }

        //1.删除收益记录，删除绑定设备，删除添加记录，删除绑定的酒店,身份改为会员
        $data['id'] = M("lc_apply")->where(['user_id' => $data['user_id']])->value("id");
        $user_id    = $data['user_id'];
        //M("shou_log")->where(['user_id' => $user_id])->delete();
        M("lc_equipment_number")->where(['f_user_id' => $user_id])->delete();
        M('lc_apply')->where(['entry_uid' => $user_id, 'type' => 3])->delete();
        $r     = M('lc_apply')->where(['id' => $data['id']])->delete();
        $level = M("users")->where(['user_id' => $user_id])->value("level");
        if ($level == 4) {
            M("users")->where(['user_id' => $user_id])->save(['level' => 2]);
        }
        if ($r) {
            return returnOk("删除成功！！");
        } else {
            return returnBad('网络错误！！', 302);
        }

    }


    /* //代理商分销商-我的酒店接口
     public function my_hotel(){

         $page = I('page',1);
         $level = I('level');
         if(empty($this->user_id)){
         return returnBad('登录超时请重新登录',302);
         }
         $uid = $this->user_id;
         //查找我直接下级是分销商的所有用户->limit(($page-1)*10,2)
         $count = 0;
         $num = 0;
         $hotel = array();
         if($level == 5){
             $dist = M("users")->where(['level'=>4,'first_leader'=>$uid])->field("user_id")->select();
             $count = 0;
             $num = 0;
             $hotel = array();
             //查找所有分销商id聚合
             if($dist){
                 $arr = [];
                 foreach($dist as $k=>$v){
                     $arr[] = $v['user_id'];
                 }
                 $string = explode(",",$arr);
                 //查找该分销商下面的酒店array('level' => ["in", "1,2,3"])
                 $hotel = M("lc_equipment_number")->where(array('f_user_id' => ["in",$string]))->field('j_user_id')->group("j_user_id")->limit(($page-1)*10,10)->select();
                 $count = M("lc_equipment_number")->where(array('f_user_id' => ["in",$string]))->field('j_user_id')->group("j_user_id")->count();
                 //查询酒店头像收入
                 if($hotel){
                     foreach($hotel as $key=>$val){
                         $users = M("users")->where(['user_id'=>$val['j_user_id']])->field('nickname,head_pic')->find();
                         $hotel[$key]['nickname'] = $users['nickname'];
                         $hotel[$key]['head_pic'] = $users['head_pic'];
                         $shou_log = M("shou_log")->where(['user_id'=>$v['j_user_id']])->sum('money');
                         $num = $num + $shou_log;
                         $hotel[$key]['shou_number'] = $shou_log;//团队中个人总业绩
                     }
                 }

             }


             //分销商查找设备绑定的所有酒店
         }elseif($level == 4){
             $hotel = M("lc_equipment_number")->where(array('f_user_id' =>$uid))->field('j_user_id')->group("j_user_id")->limit(($page-1)*10,10)->select();
             $count = M("lc_equipment_number")->where(array('f_user_id' =>$uid))->field('j_user_id')->group("j_user_id")->count();
             //查询酒店头像收入
             if($hotel){
                 foreach($hotel as $key=>$val){
                     $users = M("users")->where(['user_id'=>$val['j_user_id']])->field('nickname,head_pic')->find();
                     $hotel[$key]['nickname'] = $users['nickname'];
                     $hotel[$key]['head_pic'] = $users['head_pic'];
                     $shou_log = M("shou_log")->where(['user_id'=>$v['j_user_id']])->sum('money');
                     $num = $num + $shou_log;
                     $hotel[$key]['shou_number'] = $shou_log;//团队中个人总业绩
                 }
             }

         }

         $data = array(
             'hotel_list' =>$hotel,
             'num' =>$num,
             'count'=>$count,
         );
         return returnOk($data);

 }*/


    public function index()
    {
        if (empty($this->user_id)) {
            return returnBad('登录超时请重新登录', 302);
        }
        $usersLogic = new UsersLogic;
        $result     = $usersLogic->getApiUserInfo($this->user_id);

        $result['result']["level_name"] = Db::name("user_level")->where(["level_id" => $result["result"]["level"]])->getField('level_name');
        $sign                           = Db::name("user_sign")->where(["user_id" => $this->user_id])->getField('sign_total');
        $result['result']["sign_total"] = $sign ? $sign : 0;
        return returnOk($result['result']);
    }

    /**
     * 获取用户授权信息
     * @param
     * @param
     */
    public function get_user_info()
    {
        header('Access-Control-Allow-Origin: *');
        Loader::import('WxAuth', EXTEND_PATH);
        //$route = I('route');
        //Log::write('1111'.$route);
        //$model = new UserModel();
        $usersLogic = new UsersLogic;
        $appid      = config('APPID');
        $appKey     = config('SECRET');
        $wxPay      = new \WxAuth($appid, $appKey);


        $user = $wxPay->GetOpenid();//获取openid

        $info = $usersLogic->set_user_insert($user);
        if ($info) {
            //$url="http://qd.28892182.com/ganyiji/dist/index.html#/?openid=".$info['openid'].'&user_no='.$info['user_no'].'&nickname='.$info['nickname'].'&head_pic='.$info['head_pic'].'&pay_points='.$info['pay_points'].'&level_name='.$info['level_name'];
            $url = 'http://' . $_SERVER['HTTP_HOST'] . "/dist/index.html#/?openid=" . $info;
            //Log::write('1111'.$route);
            //$url = $route."?openid=".$info;
            Header("location:" . $url . "");
            exit;
        } else {
            return ['code' => 300, 'status' => false, 'msg' => '登录失败'];
            exit;
        }
    }

    //推广二维码
    public function getQRCode()
    {
        /*$yum = $_SERVER['HTTP_HOST'];
        $path = 'public/images/wechat/qrcode';
        $day = date("Ymd",strtotime("+1 day"));
        $file = $path.'/'.$day.'_gyjqrcode.jpg';

        $pay = new PayLogic();
        if (!file_exists($file)){
            $pay->getQRCode('http://'.$yum.'/index.php/api/Login/index',$file);
        }
        return returnOk('http://'.$yum.'/'.$file);*/

        $day = date("Ymd", strtotime("+1 day"));
        $pay = new PayLogic();
        if (!file_exists($day . 'gyjqrcode.jpg')) {
            $pay->getQRCode('http://' . $_SERVER['HTTP_HOST'] . '/index.php/api/Login/index', $day . 'gyjqrcode.jpg');
        }
        return returnOk('http://' . $_SERVER['HTTP_HOST'] . '/' . $day . 'gyjqrcode.jpg');
    }

    //干衣机js扫码参数
    public function getSignPackage()
    {
        $pay        = new PayLogic();
        $parameters = $pay->getSignPackage();
        //dump($parameters);die;
        return returnOk($parameters);
    }

    /*
     * 生成分享二维码
     */
    public function share_qrcode_user()
    {
        $usersLogic = new UsersLogic;

        $account_log = $usersLogic->share_qrcode_user($this->user_id);

        $account_log['xcx_qrcode'] = url_add_domain($account_log['xcx_qrcode']);

        return returnOk($account_log);
    }


    /*
     * 我的积分
     */
    public function points_list()
    {
        $type                      = I('type', 'all');
        $usersLogic                = new UsersLogic;
        $account_log['pay_points'] = Db::name('users')->where(['user_id' => $this->user_id])->getField('pay_points');
        $result                    = $usersLogic->points($this->user_id, $type);
        foreach ($result['account_log'] as $val) {
            $val['change_time'] = date('Y-m-d H:i:s', $val['change_time']);
            $log[]              = $val;
        }
        $account_log['list'] = $log;
        return returnOk($account_log);
    }

    /*
    *会员激活
    */
    public function user_activation()
    {

        $user = M('users')->field('pay_currency,level')->where(['user_id' => $this->user_id])->find();
        if (!empty($user['level']) && $user['level'] <= 1) {
            if ($user['pay_currency'] < 200) return returnBad('您的维护卡不足', '307');
            $pay_currency = $user['pay_currency'] - 200;
            $result       = M('users')->where(['user_id' => $this->user_id])->update(['pay_currency' => $pay_currency, 'level' => 2, 'activation_time' => time()]);
        }
        if ($result) {
            return returnOk('店长');
        } else {
            return returnBad('激活失败');
        }

    }

    /**
     * 获取我的下级团队
     * @return \think\response\Json
     */
    public function son_user()
    {
        $page     = I('page', 1);
        $pagesize = I('pagesize', 10);
        if (!$this->user_id) {
            return returnBad('用户标识为空', '307');
        }
        $usersLogic = new UsersLogic();
        $user_info  = $usersLogic->son_user($this->user_id, $page, $pagesize);
        return returnOk($user_info);
    }


    public function son_team_order()
    {

    }

    /*
     *绑定手机
     */
    public function real_mobile()
    {
        $mobile     = I('mobile');
        $usersLogic = new UsersLogic;
        $result     = $usersLogic->real_mobile($this->user_id, $mobile);
        return returnOk($result);
    }

    /*
     *实名认证
     */
    public function real_name()
    {
        $realname = I('realname');
        $idcard   = I('idcard');
        $address  = I('address');
        $mobile   = I('mobile');
        $data     = Db::name('users')->where('user_id', $this->user_id)->field('is_realname,realname,idcard,address')->find();
        if (!empty($data['is_realname']) && $data['is_realname'] == 1) {
            $result = $data;
        } else {
            $usersLogic = new UsersLogic;
            $result     = $usersLogic->real_name($this->user_id, $realname, $idcard, $address, $mobile);
            if ($result != 1) {
                return returnBad($result['msg'], $result['status']);
            }
        }

        return returnOk($result);
    }

    //设置支付密码
    public function setpassword()
    {
        header('Access-Control-Allow-Origin: *');
        header('Access-Control-Allow-Credentials: true');
        header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
        header("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, authKey, sessionId");
        $paypwd = input('post.paypwd');

        if (!$paypwd || strlen($paypwd) != 6) {
            return returnBad('密码只能6位', 307);
        }
        if (!preg_match('/^[1-9][0-9]*$/', $paypwd)) {
            return returnBad('密码只能数字', 308);
        }

        $users = Db::name('users')->where(['user_id' => $this->user_id])->find();

        if ($users && empty($users['paypwd'])) {
            $res = Db::name('users')->where(['user_id' => $this->user_id])->save(['paypwd' => password_shal($paypwd)]);
            if ($res) {
                return returnOk('设置成功!');
            } else {
                return returnBad('设置失败!', 307);
            }
        } else {
            return returnBad('设置失败!', 400);
        }

    }

    /**
     * 修改支付密码
     * @return array|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function passwordedit()
    {
        header('Access-Control-Allow-Origin: *');
        header('Access-Control-Allow-Credentials: true');
        header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
        header("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, authKey, sessionId");
        $data      = input('post.');
        $user_info = Db::name('users')->where(['user_id' => $this->user_id])->find();
        if ($data) {
            if ((password_shal($data['paypwd_origin'])) == $user_info['paypwd']) {
                if (password_shal($data['paypwd']) != $user_info['paypwd']) {
                    if ($data['paypwd'] == $data['password_again']) {
                        $md5_password = password_shal($data['paypwd']);
                        $res          = Db::name('users')->where(['user_id' => $this->user_id])->save(['paypwd' => $md5_password]);
                        if ($res) {
                            return returnOk('修改成功!');
                        } else {
                            return returnBad('修改失败!', 400);
                        }
                    } else {
                        return returnBad('再次输入不一致!', 400);
                    }
                } else {
                    return returnBad('不能使用最近设置过的密码', 400);
                }
            } else {
                return returnBad('原密码输入错误!', 400);
            }
        } else {
            return returnBad('密码不能为空', 400);
        }
    }

    /*
     * 我的维护卡
     */
    public function currency_list()
    {
        $type                        = I('type', 'all');
        $usersLogic                  = new UsersLogic;
        $account_log['pay_currency'] = Db::name('users')->where(['user_id' => $this->user_id])->getField('pay_currency');
        $result                      = $usersLogic->currency($this->user_id, $type);

        $account_log['list'] = $result['account_log'];
        return returnOk($account_log);
    }

    /*
     * 维护卡买卖
     */
    public function currency_business()
    {
        $type       = I('type', 1);
        $usersLogic = new UsersLogic;
        if ($type == 1) {
            $account_log['pay_currency'] = Db::name('users')->where(['user_id' => $this->user_id])->getField('pay_currency');
        } else {
            $account_log = Db::name('users')->field('user_no,nickname')->where(['user_id' => $this->user_id])->find();
        }

        $qrcode                = $usersLogic->checkUserIdQrcode($this->user_id);
        $account_log['qrcode'] = url_add_domain($qrcode);

        return returnOk($account_log);
    }

    public function is_paypwd()
    {
        header('Access-Control-Allow-Origin: *');
        header('Access-Control-Allow-Credentials: true');
        header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
        header("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, authKey, sessionId");
        $data = Db::name('users')->where(['user_id' => $this->user_id])->value('paypwd');
        if ($data) {
            return returnOk('用户已设置密码');
        } else {
            return returnBad('您还没设置密码');
        }
    }

    /*
     * 维护卡卖出
     */
    public function currency_sell()
    {
        $user_no      = I('user_no');
        $pay_currency = I('pay_currency');
        $paypwd       = I('paypwd');
        if (!$pay_currency) {
            return returnBad('维护卡不能为空', '400');
        }
        if (!$paypwd) {
            return returnBad('支付密码不能为空', '308');
        }

        $usersLogic = new UsersLogic;
        $res        = $usersLogic->sell($this->user_id, $user_no, $pay_currency, $paypwd);
        if ($res != 2) {
            return returnBad($res['msg'], $res['status']);
        }

        return returnOk($res);
    }

    /**
     * 钱包明细
     * @return mixed
     */
    public function account_list()
    {
        $type        = I('type', 'all');
        $p           = I('p/d');
        $usersLogic  = new UsersLogic;
        $result      = $usersLogic->account($this->user_id, $type);
        $account_log = $result['account_log'];

        foreach ($account_log as $v) {
            $date        = strtotime($v["change_data"]);
            $ym          = date("Y年m月", $date);
            $list[$ym][] = $v;
        }

        $next                 = M('account_log')->where("user_money!=0 and user_id=" . $this->user_id)->page($p + 1, 15)->column('log_id');
        $data["next_page"]    = $next ? $p + 1 : false;
        $user                 = M('users')->field('user_money,pay_currency')->where('user_id', $this->user_id)->find();
        $data["money"]        = $user['user_money'] ?: 0;
        $data["withdraw"]     = 0;
        $data["pay_currency"] = $user['pay_currency'] ?: 0;
        $data["list"]         = $list;

        return returnOk($data);
    }


    /**
     * 下线列表(我的团队)
     */
    public function lower_list()
    {
        $user = Db::name('users')->where(['user_id' => $this->user_id])->find();
//        if($user['is_distribut'] != 1)
//            return returnBad('您还不是分销商',308);
        $level     = I('get.level', 1);
        $q         = I('post.q', '', 'trim');
        $condition = array(1 => 'first_leader', 2 => 'second_leader', 3 => 'third_leader');

        $where = "{$condition[$level]} = {$this->user_id}";
        $bind  = array();
        if ($q) {
            $where      .= " and (nickname like :q1 or user_id = :q2 or mobile = :q3)";
            $bind['q1'] = "%$q%";
            $bind['q2'] = $q;
            $bind['q3'] = $q;
        }

        $count       = Db::name('users')->where($where)->bind($bind)->count();
        $page        = new Page($count, C('PAGESIZE'));
        $lists       = Db::name('users')->alias("a")
            ->field('a.nickname,a.user_id,b.level_name,a.province,a.city,a.reg_time,a.head_pic')
            ->join('user_level b', 'b.level_id = a.level', 'INNER')
            ->where($where)->bind($bind)
            ->limit("{$page->firstRow},{$page->listRows}")
            ->order('user_id desc')
            ->select();
        $region_list = db('region')->cache(true)->getField('id,name');
        foreach ($lists as $k => $v) {
            if ($v['province']) {
                $lists[$k]['province'] = $region_list[$v['province']];
                $lists[$k]['city']     = $region_list[$v['city']];
            }
        }
        $level = Db::name("user_level")->where(["level_id" => ["<=", $user['level']]])->field('level_id,level_name as name')->select();
        $data  = [
            'count' => $count,
            'list'  => $lists,
            'level' => $level
        ];
        return returnOk($data);
    }

    /**
     * 下线订单列表（分销订单）
     */
    public function order_list()
    {
        $page     = I('page', 1);
        $pagesize = I('pagesize', 10);
        $user     = Db::name('user_group')->where(['user_id' => $this->user_id])->value('a_son_id');


        $status = I('status', 'all');
        if ($status == 'all') {
            $status = '0,1,2,3';
        }
        $where = array('user_id' => ['in', $user], 'order_status' => ['in', $status], 'prom_type' => 0);

        $count = M('order')->where($where)->count();
        $Page  = new Page($count, C('PAGESIZE'));

        $list          = M('order')
            ->where($where)
            ->order("order_id desc")
            ->limit($Page->firstRow . ',' . $Page->listRows)
            ->getField('order_id,order_sn,add_time,total_amount,order_status,confirm_time'); //订单记录
        $order_id_list = get_arr_column($list, 'order_id');
        $order_sn_list = get_arr_column($list, 'order_sn');
        $goods_list    = M('order_goods')
            ->where(['order_id' => ['in', implode(',', $order_id_list)]])
            ->order("order_id desc")
            ->limit($Page->firstRow . ',' . $Page->listRows)
            ->getField('order_id,goods_name,final_price,goods_num,goods_id'); //商品记录
        $shou_log_list = M('shou_log')
            ->where(['order_sn' => ['in', implode(',', $order_sn_list)]])
            ->order("id desc")
            ->limit($Page->firstRow . ',' . $Page->listRows)
            ->getField('order_sn,allf_money,subcommission'); //分佣记录

        if (!$list) {
            $data['list'] = [];
            return returnOk($data);
        }

        foreach ($list as $k => $v) {
            if ($goods_list[$k]['goods_id'] == 243) {
                $imgurl = '/public/images/wechat/NGJ-900.jpg';
            } else {
                $imgurl = '/public/images/wechat/NGJ-650.jpg';
            }
            $list[$k]['goods_name']    = $goods_list[$k]['goods_name'] ?: '';
            $list[$k]['final_price']   = $goods_list[$k]['final_price'] ?: '';
            $list[$k]['goods_num']     = $goods_list[$k]['goods_num'] ?: '';
            $list[$k]['goods_imgurl']  = url_add_domain($imgurl);
            $list[$k]['order_status']  = C('REBATES_STATUS')[$v['order_status']];
            $list[$k]['total_amount']  = $v['total_amount'] ?: 0.00;
            $list[$k]['allf_money']    = $shou_log_list[$v['order_sn']]['allf_money'] ?: '0.00';
            $list[$k]['subcommission'] = $shou_log_list[$v['order_sn']]['subcommission'] ? $shou_log_list[$v['order_sn']]['subcommission'] . '%' : '0.00%';
            $list[$k]['add_time']      = date('Y-m-d H:i:s', $v['add_time']);
            $list[$k]['confirm_time']  = $v['confirm_time'] ? date('Y-m-d H:i:s', $v['confirm_time']) : 0;
        }
        //dump($list);die;
        $data = pageReturn($list, $page, $pagesize);
        return returnOk($data);
    }


    /*
     * 个人信息
     */
    public function userinfo()
    {
        $userLogic = new UsersLogic();
        $user_info = $userLogic->get_info($this->user_id); // 获取用户信息
        $user_info = $user_info['result'];
        if (IS_POST) {
            I('post.nickname') ? $post['nickname'] = I('post.nickname') : false; //昵称
            I('post.head_pic') ? $post['head_pic'] = I('post.head_pic') : false; //头像地址
            I('post.email') ? $post['email'] = I('post.email') : false; //邮箱
            I('post.mobile') ? $post['mobile'] = I('post.mobile') : false; //手机
            I('post.realname') ? $post['realname'] = I('post.realname') : false; //真实名称
            $email  = I('post.email');
            $mobile = I('post.mobile');

            if (!empty($email)) {
                $c = M('users')->where(['email' => input('post.email'), 'user_id' => ['<>', $this->user_id]])->count();
                if ($c) return returnBad('邮箱已被使用', 306);
            }
            if (!empty($mobile)) {
                $c = M('users')->where(['mobile' => input('post.mobile'), 'user_id' => ['<>', $this->user_id]])->count();
                if ($c) return returnBad('手机已被使用', 306);
            }

            if (!$userLogic->update_info($this->user_id, $post))
                return returnBad('保存失败', 308);
            return returnOk([1]);
        }
        return returnOk($user_info);
    }

    /*
     * 密码修改
     */
    public function password()
    {
        $logic = new UsersLogic();
        $data  = $logic->get_info($this->user_id);
        $user  = $data['result'];
        if ($user['mobile'] == '' && $user['email'] == '')
            return returnBad('请先绑定手机或邮箱', 308);
        $userLogic = new UsersLogic();

        $data = $userLogic->password($this->user_id, I('post.old_password'), I('post.new_password'), I('post.new_password'));
        if ($data['status'] == -1)
            return returnBad($data['msg'], 308);
        return returnOk($data);
    }

    /**
     * 用户地址列表
     */
    public function address_list()
    {
        $address_lists = db('user_address')->where('user_id', $this->user_id)->order('is_default desc')->select();
        /*$region_list = db('region')->cache(true)->getField('id,name');
        foreach ($address_lists as $k => $v){
            $address_lists[$k]['province'] = $region_list[$v['province']];
            $address_lists[$k]['city'] = $region_list[$v['city']];
            $address_lists[$k]['district'] = $region_list[$v['district']];
            $address_lists[$k]['twon'] = $region_list[$v['district']];
        }*/
        return returnOk($address_lists);
    }

    /**
     * 保存地址
     */
    public function addressSave()
    {
        $address_id = input('address_id/d', 0);
        $is_default = input('is_default/d', 0);
        if (!empty($is_default)) {
            M('user_address')->where(array('user_id' => $this->user_id))->save(array('is_default' => 0));
        }
        if (IS_POST) {
            $data = input('post.');
            if (!empty($address_id)) {
                //编辑
                $userAddress = UserAddress::get(['address_id' => $address_id, 'user_id' => $this->user_id]);
                if (empty($userAddress)) {
                    return returnBad("参数错误", 309);
                }
            } else {
                //新增
                $userAddress        = new UserAddress();
                $user_address_count = Db::name('user_address')->where("user_id", $this->user_id)->count();
                if ($user_address_count >= 20) {
                    return returnBad("最多只能添加20个收货地址", 309);
                }
                //检查手机格式
                if ($data['consignee'] == '')
                    return returnBad("收货人不能为空", 309);
                if (!$data['province'] || !$data['city'] || !$data['district'])
                    return returnBad("所在地区不能为空", 309);
                if (!$data['address'])
                    return returnBad("地址不能为空", 309);
                if (!check_mobile($data['mobile']) && !check_telephone($data['mobile']))
                    return returnBad("手机号码格式有误", 309);
                $data['user_id'] = $this->user_id;
            }
            $userAddress->data($data);
            $userAddress['longitude'] = true;
            $userAddress['latitude']  = true;
            $row                      = $userAddress->save();
            if ($row !== false) {
                return returnOk([$userAddress->address_id]);
            } else {
                return returnBad("操作失败", 309);
            }
        }
        $address = M('user_address')->where(array('address_id' => $address_id, 'user_id' => $this->user_id))->find();
        if ($address) {
            $region_list             = db('region')->where(array('level' => ["in", "1,2,3"]))->cache(true)->getField('id,name');
            $address['provinceName'] = $region_list[$address['province']];
            $address['cityName']     = $region_list[$address['city']];
            $address['districtName'] = $region_list[$address['district']];
        }
        return returnOk($address);
    }

    /**
     * 获取市或者区
     */
    public function getRegionByParentId()
    {
        $parent_id = I('parent_id/d');
        if ($parent_id) {
            $region_list = Db::name('region')->field('id,name')->where(['parent_id' => $parent_id])->select();
        } else {
            $region_list = Db::name('region')->where(['level' => 1])->field('id,name')->select();
        }
        return returnOk($region_list);
    }

    /*
     * 设置默认收货地址
     */
    public function set_default()
    {
        $id = I('get.id/d');
        M('user_address')->where(array('user_id' => $this->user_id))->save(array('is_default' => 0));
        $row = M('user_address')->where(array('user_id' => $this->user_id, 'address_id' => $id))->save(array('is_default' => 1));
        return returnOk($row);
    }

    /*
     * 地址删除
     */
    public function del_address()
    {
        $id      = I('get.id/d');
        $address = M('user_address')->where("address_id", $id)->find();
        $row     = M('user_address')->where(array('user_id' => $this->user_id, 'address_id' => $id))->delete();
        // 如果删除的是默认收货地址 则要把第一个地址设置为默认收货地址
        if ($address['is_default'] == 1) {
            $address2 = M('user_address')->where("user_id", $this->user_id)->find();
            $address2 && M('user_address')->where("address_id", $address2['address_id'])->save(array('is_default' => 1));
        }
        if (!$row)
            return returnBad("删除失败", 308);
        else
            return returnOk([1]);
    }


    /**
     * 用户收藏列表
     */
    public function collect_list()
    {
        $userLogic = new UsersLogic();
        $data      = $userLogic->get_goods_collect($this->user_id);
        $list      = $data['result'];
        foreach ($list as $k => $v) {
            $list[$k]['original_img'] = url_add_domain(goods_thum_images($v['goods_id'], 100, 100));
        }
        return returnOk($list);
    }

    /*
     *取消收藏
     */
    public function cancel_collect()
    {
        $collect_id = I('collect_id/d');
        $user_id    = $this->user_id;
        if (M('goods_collect')->where(['collect_id' => $collect_id, 'user_id' => $user_id])->delete()) {
            return returnOk();
        } else {
            return returnBad("取消收藏失败");
        }
    }

    /**
     * 优惠券
     */
    public function coupon()
    {
        $logic = new UsersLogic();
        $data  = $logic->get_coupon($this->user_id, input('type'));
        foreach ($data['result'] as $k => $v) {
            $data['result'][$k]['money']     = intval($v["money"]);
            $data['result'][$k]['condition'] = intval($v["condition"]);
            $user_type                       = $v['use_type'];
            $data['result'][$k]['use_scope'] = C('COUPON_USER_TYPE')["$user_type"];
            if ($user_type == 1) { //指定商品
                $data['result'][$k]['goods_id'] = M('goods_coupon')->field('goods_id')->where(['coupon_id' => $v['cid']])->getField('goods_id');
            }
            if ($user_type == 2) { //指定分类
                $data['result'][$k]['category_id'] = Db::name('goods_coupon')->where(['coupon_id' => $v['cid']])->getField('goods_category_id');
            }
        }
        $coupon_list = $data['result'];
        return returnOk($coupon_list);
    }

    /**
     * 会员签到积分奖励
     * 2017/9/28
     */
    public function sign()
    {
        $userLogic           = new UsersLogic();
        $user_id             = $this->user_id;
        $info                = $userLogic->idenUserSign($user_id);//标识签到
        $info["total_jifen"] = $this->user["pay_points"];
        return returnOk($info);
    }

    /**
     * Ajax会员签到
     * 2017/11/19
     */
    public function user_sign()
    {
        //dump(date("Y-n-j", time()));die;
        $userLogic = new UsersLogic();
        $user_id   = $this->user_id;
        $config    = tpCache('sign');
        $date      = I('date'); //2017-9-29

        //是否正确请求
        if ((date("Y-n-d", time()) != $date)) return returnBad("签到失败", 306);
        //签到开关
        if ($config['sign_on_off'] > 0) {
            $map['sign_last'] = $date;
            $map['user_id']   = $user_id;
            $userSingInfo     = Db::name('user_sign')->where($map)->find();
            //今天是否已签
            if ($userSingInfo) return returnBad("您今天已经签过啦", 306);
            //是否有过签到记录
            $checkSign = Db::name('user_sign')->where(['user_id' => $user_id])->find();
            if (!$checkSign) {
                $result = $userLogic->addUserSign($user_id, $date);            //第一次签到
            } else {
                $result = $userLogic->updateUserSign($checkSign, $date);       //累计签到
            }

            $return = ['msg' => $result['msg'], 'sign_integral' => $result['sign_integral']];
        } else {
            return returnBad("该功能未开启", 306);
        }

        return returnOk($return);
    }


    /**
     * 申请提现记录
     */
    public function withdrawals()
    {
        C('TOKEN_ON', true);
        $cash_open = tpCache('cash.cash_open');
        if ($cash_open != 1) {
            return returnBad("提现功能已关闭,请联系商家", 308);
        }
        if (IS_POST) {
            $cash_open = tpCache('cash.cash_open');
            if ($cash_open != 1) {
                return returnBad("提现功能已关闭,请联系商家", 308);
            }

            $data                = I('post.');
            $data['user_id']     = $this->user_id;
            $data['create_time'] = time();
            $cash                = tpCache('cash');
            if ($data['money'] > $this->user['distribut_money']) {
                return returnBad("本次提现余额不足", 308);
            }
            if ($data['money'] <= 0) {
                return returnBad("提现额度必须大于0", 308);
            }

            // 统计所有0，1的金额
            $status      = ['in', '0,1'];
            $total_money = Db::name('withdrawals')->where(array('user_id' => $this->user_id, 'status' => $status))->sum('money');
            if ($total_money + $data['money'] > $this->user['distribut_money']) {
                return returnBad("您有提现申请待处理，本次提现余额不足", 308);
            }

            if ($cash['cash_open'] == 1) {
                $taxfee = round($data['money'] * $cash['service_ratio'] / 100, 2);
                // 限手续费
                if ($cash['max_service_money'] > 0 && $taxfee > $cash['max_service_money']) {
                    $taxfee = $cash['max_service_money'];
                }
                if ($cash['min_service_money'] > 0 && $taxfee < $cash['min_service_money']) {
                    $taxfee = $cash['min_service_money'];
                }
                if ($taxfee >= $data['money']) {
                    return returnBad("提现额度必须大于手续费!", 308);
                }
                $data['taxfee'] = $taxfee;

                // 每次限最多提现额度
                if ($cash['min_cash'] > 0 && $data['money'] < $cash['min_cash']) {
                    return returnBad('每次最少提现额度' . $cash['min_cash'], 308);
                }
                if ($cash['max_cash'] > 0 && $data['money'] > $cash['max_cash']) {
                    return returnBad('每次最多提现额度' . $cash['max_cash'], 308);
                }

                $status      = ['in', '0,1,2,3'];
                $create_time = ['gt', strtotime(date("Y-m-d"))];
                // 今天限总额度
                if ($cash['count_cash'] > 0) {
                    $total_money2 = Db::name('withdrawals')->where(array('user_id' => $this->user_id, 'status' => $status, 'create_time' => $create_time))->sum('money');
                    if (($total_money2 + $data['money'] > $cash['count_cash'])) {
                        $total_money = $cash['count_cash'] - $total_money2;
                        if ($total_money <= 0) {
                            return returnBad("你今天累计提现额为{$total_money2},金额已超过可提现金额.", 308);
                        } else {
                            return returnBad("你今天累计提现额为{$total_money2}，最多可提现{$total_money}账户余额.", 308);
                        }
                    }
                }
                // 今天限申请次数
                if ($cash['cash_times'] > 0) {
                    $total_times = Db::name('withdrawals')->where(array('user_id' => $this->user_id, 'status' => $status, 'create_time' => $create_time))->count();
                    if ($total_times >= $cash['cash_times']) {
                        return returnBad("今天申请提现的次数已用完.", 308);
                    }
                }
            } else {
                $data['taxfee'] = 0;
            }
            if ($data["type"] == 0) {
                $data["bank_name"] = "微信";
            } else if ($data["type"] == 1) {
                $data["bank_name"] = "银行卡";
            }
            unset($data["type"]);
            if (M('withdrawals')->add($data)) {
                if ($data['taxfee'] > 0) {
                    accountLog($this->user_id, ($data['taxfee'] * -1), 0, "提现手续费");//手动转账
                }
                accountLog($this->user_id, ($data['money'] * -1), 0, "奖励金提现");//手动转账，
                Db::name("users")->where("user_id", $this->user_id)->save(["withdrawal_money" => ["exp", "withdrawal_money" + $data['money']]]);
                return returnOk();
            } else {
                return returnBad("提交失败,联系客服!", 308);
            }
        }
        $distribut_money  = $this->user["distribut_money"];//累计返佣金额
        $withdrawal_money = $this->user["withdrawal_money"];//累计提现金额
        $with_money       = $distribut_money - $withdrawal_money;//现有佣金额度
        if ($with_money < 0) {
            return returnBad("提现金额异常,联系客服!", 308);
        }
        $user_money = $this->user["user_money"];//用户金额
        if ($with_money <= $user_money) {
            $dist_money = $with_money;
        } else {
            $dist_money = $user_money;
        }
        $data = [
            'cash_config'     => tpCache('cash'),//提现配置项
            'distribut_money' => $dist_money//用户可提现余额
        ];
        return returnOk($data);
    }

    /**
     * 提现记录列表
     */
    public function withdrawals_list()
    {
        $p                            = I("p/d");
        $withdrawals_where['user_id'] = $this->user_id;
        $count                        = M('withdrawals')->where($withdrawals_where)->count();
        $page                         = new Page($count, 15);
        $lists                        = M('withdrawals')->where($withdrawals_where)->order("create_time desc")->limit("{$page->firstRow},{$page->listRows}")->select();
        $next                         = M('withdrawals')->where($withdrawals_where)->page($p + 1, 15)->column('id');
        foreach ($lists as $v) {
            $ym          = date("Y年m月", $v["create_time"]);
            $v["status"] = C('WITHDRAW_STATUS')[$v["status"]];
            $list[$ym][] = $v;
        }
        $data["next_page"] = $next ? $p + 1 : false;
        $data["list"]      = $list;
        return returnOk($data);
    }

    /**
     * 查看消息
     */
    public function message_notice_detail()
    {
        $type = I('type', 0);
        // $type==3私信，暂时没有

        $message_logic = new Message();
        $message_logic->checkapiPublicMessage($this->user_id);

        $where       = array(
            'user_id'  => $this->user_id,
            'deleted'  => 0,
            'category' => $type
        );
        $userMessage = new UserMessage();
        $count       = $userMessage->where($where)->count();
        $page        = new Page($count, 10);
        $rec_id      = $userMessage->where($where)->LIMIT($page->firstRow . ',' . $page->listRows)->order('rec_id desc')->column('rec_id');
        $lists       = $message_logic->sortMessageListBySendTime($rec_id, $type);
        foreach ($lists as $k => $v) {
            $list[] = collection($v)->toArray();
        }
        return returnOk($list);
    }

    /**
     * 标记已读
     */
    public function message_notice_info()
    {
        $message_logic = new Message();
        $forRead       = $message_logic->setApiMessageForRead(I('rec_id'), $this->user_id);
        if ($forRead['status'] > 0) {
            return returnOk($forRead['msg']);
        } else {
            return returnBad($forRead['msg'], 308);
        }
    }

    /**
     * 删除站内信
     */
    public function del_message_notice()
    {
        $message_logic = new Message();
        $forRead       = $message_logic->deletedApiMessage(I('rec_id'), 0, $this->user_id);
        if ($forRead['status'] > 0) {
            return returnOk($forRead['msg']);
        } else {
            return returnBad($forRead['msg'], 308);
        }
    }

    /**
     * @return array|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     * 申请代理
     */
    public function agent_apply()
    {
        $userLogic = new UsersLogic();
        if (!$this->user_id) {
            return returnBad("用户未登录", 302);
        }
        $data["user_leve"] = Db::name("user_level")->where(["level_id" => ['>', 2]])->select();
        if (IS_POST) {
            I('post.level') ? $data['level_id'] = I('post.level') : false; //级别
            I('post.realname') ? $post['realname'] = I('post.realname') : false; //真实名称
            I('post.idcard') ? $post['idcard'] = I('post.idcard') : false; //身份证
            I('post.mobile') ? $post['mobile'] = I('post.mobile') : false; //手机
            I('post.province') ? $post['province'] = I('post.province') : false; //省
            I('post.city') ? $post['city'] = I('post.city') : false; //市
            I('post.district') ? $post['district'] = I('post.district') : false; //区
            I('post.address') ? $post['address'] = I('post.address') : false; //详细地址
            $mobile = I('post.mobile');

            $userAgentValidate = Loader::validate('UserAgent');
            if (!$userAgentValidate->batch()->check($post)) {
                return returnBad($userAgentValidate->getError(), 308);
            }


            if (!empty($mobile)) {
                $c = M('users')->where(['mobile' => input('post.mobile'), 'user_id' => ['<>', $this->user_id]])->count();
                if ($c) return returnBad('手机已被使用', 306);
            }
            //$post['is_distribut'] = 2;//待审核
            if (!$userLogic->update_info($this->user_id, $post))
                return returnBad('保存失败', 308);
            $data['add_time'] = time();
            $data['user_id']  = $this->user_id;

            $useragent = Db::name('user_agent')->where(['user_id' => $this->user_id, 'level_id' => $data['level_id']])->find();
            if ($useragent) {
                if ($useragent["stauts"] == 1) {
                    return returnOk([$useragent["id"]]);
                }
                Db::name('user_agent')->where(["id" => $useragent["id"]])->save($data);
                return returnOk([$useragent["id"]]);
            }
            $agent = Db::name('user_agent')->insertGetId($data);
            //奖励金分成
            $first_rate  = tpCache("bond.partner_bond");//一级奖励金比例
            $second_rate = tpCache("bond.total_agent_bond");//二级奖励金比例

            //奖励金记录发放
            $amount = M('user_level')->where(array('level_id' => $data['level_id']))->getField("amount");//支付金额

            $first_money  = $amount * ($first_rate / 100); // 一级赚到的钱
            $second_money = $amount * ($second_rate / 100); // 二级赚到的钱

            $users       = Db::name('users')->where(['user_id' => $data["user_id"]])->find();
            $first_level = Db::name('users')->where(['user_id' => $users["first_leader"]])->getField("level");

            // 一级 分销商赚 的钱. 小于一分钱的 不存储
            if ($users['first_leader'] > 0 && $first_money > 0.01 && $first_level > 2) {
                $data = array(
                    'user_id'     => $users['first_leader'],
                    'buy_user_id' => $users['user_id'],
                    'nickname'    => $users['nickname'],
                    'goods_price' => $amount,
                    'money'       => $first_money,
                    'level'       => 1,
                    'create_time' => time(),
                    'type'        => 2
                );
                M('rebate_log')->add($data);
            }
            $tmp_user = M('users')->where("user_id", $users['second_leader'])->find();
            // 二级 分销商赚 的钱.战略合作伙伴允许二级分销
            if ($users['second_leader'] > 0 && $second_money > 0.01 && $tmp_user["level"] == 7) {
                $data = array(
                    'user_id'     => $users['second_leader'],
                    'buy_user_id' => $users['user_id'],
                    'nickname'    => $users['nickname'],
                    'goods_price' => $amount,
                    'money'       => $second_money,
                    'level'       => 2,
                    'create_time' => time(),
                    'type'        => 2
                );
                M('rebate_log')->add($data);
            }
            if ($agent) {
                return returnOk($agent);
            } else {
                return returnBad('保存失败', 308);
            }
        }
        $user_agent                 = Db::name('user_agent')->alias("a")
            ->join('users u', 'u.user_id = a.user_id', 'INNER')
            ->field("a.*,u.realname,u.idcard,u.mobile,u.province,u.city,u.district,u.address")
            ->where(['a.user_id' => $this->user_id])->find();
        $region_list                = db('region')->where(array('level' => ["in", "1,2,3"]))->cache(true)->getField('id,name');
        $user_agent['provinceName'] = $region_list[$user_agent['province'] ? $user_agent['province'] : 1];
        $user_agent['cityName']     = $region_list[$user_agent['city'] ? $user_agent['city'] : 2];
        $user_agent['districtName'] = $region_list[$user_agent['district'] ? $user_agent['district'] : 3];
        $data["user_agent"]         = $user_agent;
        return returnOk($data);
    }

    /*
     *
     * 充值记录
     */
    public function recharge_list()
    {
        $usersLogic = new UsersLogic;
        $result     = $usersLogic->get_recharge_log($this->user_id);  //充值记录
        $this->assign('page', $result['show']);
        $this->assign('lists', $result['result']);
        return returnOk($result['result']);
    }

    /**
     * 获取个人二维码
     * @return \think\response\Json
     */
    public function userQrcode()
    {
        $user   = new UsersLogic();
        $qrcode = $user->checkUserQrcode($this->user_id);
        return returnOk(url_add_domain($qrcode));
    }

    /**
     * 获取个人维护卡的二维码
     * @return \think\response\Json
     */
    public function useridQrcode()
    {
        $user   = new UsersLogic();
        $qrcode = $user->checkUserIdQrcode($this->user_id);
        return returnOk(url_add_domain($qrcode));
    }

    /**
     * 我的佣金
     * @author
     * @time 2018-12-29
     */
    public function rebate_log()
    {
        $user             = $this->user;
        $status           = I('status', ''); //日志状态
        $sort_asc         = I('sort_asc', 'desc');  //排序
        $sort             = I('sort', 'create_time'); //排序条件
        $where['user_id'] = $this->user_id;
        $where['status']  = ["neq", 4];
        if ($status != '') {
            $where['status'] = $status;
        }
        $count       = Db::name('rebate_log')->where($where)->count(); //统计符合条件的数量
        $Page        = new Page($count, C('PAGESIZE'));
        $lists       = Db::name('rebate_log')->where($where)->order("$sort  $sort_asc")->limit($Page->firstRow . ',' . $Page->listRows)->cache(true)->select(); //查询日志
        $count_money = 0;
        foreach ($lists as $val) {
            if ($val["status"] != 3) {
                $count_money += $val["money"];
            }
        }
        $data = [
            "distribut_money"  => $user['distribut_money'],//历史佣金
            "withdrawal_money" => $user['distribut_money'] - $user['withdrawal_money'], //历史佣金 - 提现金额 = 可提现金额
            "count_money"      => $count_money, //代收益佣金
            "lists"            => $lists, //佣金记录
        ];
        return returnOk($data);
    }

    //查看押金
    public function deposit_log()
    {
        $user = $this->user;
        if ($user < 3) {
            return returnBad("您的会员级别无法查看押金", 310);
        }
        $level = Db::name("user_level")->where(["level_id" => $user["level"]])->field('level_name,deposit')->find();
        if ($level["deposit"] == $user["deposit"]) {
            return returnOk(["deposit" => $user["deposit"], "level_name" => $level["level_name"]]);
        } else {
            return returnBad("查看押金失败，请联系客服", 310);
        }
    }

    /**
     * 佣金记录
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function withdrawals_log()
    {
        if (!$this->user_id) {
            return returnBad("请登录", 302);
        }
        if ($this->user["level"] < 2) {
            return returnBad("等级较低，无法查看佣金", 306);
        }

        // 销售额 和 我的奖励
        $rebate                               = Db::name("rebate_log")->where(["user_id" => $this->user_id])->field('money,status,order_id,order_sn')->select();
        $data["reward"]["complete"]           = 0;
        $data["reward"]["stay"]               = 0;
        $data["withdrawal"]["complete"]       = 0;
        $data["withdrawal"]["stay"]           = 0;
        $data["reward"]["total_complete"]     = 0;
        $data["reward"]["total_stay"]         = 0;
        $data["withdrawal"]["total_complete"] = 0;
        $data["withdrawal"]["total_stay"]     = 0;
        foreach ($rebate as $k => $v) {
            if ($v["order_id"] == "" && $v["order_sn"] == "") {//奖励金收益
                if ($v["status"] == 3) {//已完成收益
                    $data["reward"]["complete"]       += $v["money"];
                    $data["reward"]["total_complete"] += 1;
                } else {
                    $data["reward"]["stay"]       += $v["money"];
                    $data["reward"]["total_stay"] += 1;
                }
            } else {
                if ($v["status"] == 3) {//已完成收益
                    $data["withdrawal"]["complete"]       += $v["money"];
                    $data["withdrawal"]["total_complete"] += 1;
                } else {
                    $data["withdrawal"]["stay"]       += $v["money"];
                    $data["withdrawal"]["total_stay"] += 1;
                }
            }
        }
        $data["distribut_money"] = $this->user['distribut_money'];
        $data["stay_money"]      = $data["reward"]["stay"] + $data["withdrawal"]["stay"];
        return returnOk($data);
    }

    /**
     * 押金退还
     * @return array|\think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function return_deposit()
    {
        if (!$this->user_id) {
            return returnBad("请登录", 302);
        }
        $deposit = $this->user["deposit"];
        if ($deposit == 0) {
            return returnBad("没有押金可退", 308);
        }

        $return_deposit = Db::name("return_deposit")->where(["user_id" => $this->user_id, "refund_money" => $deposit, "status" => 0])->find();
        if ($return_deposit) {
            return returnBad("请等待管理员审核", 308);
        }

        $recharge = Db::name("recharge")->where(["user_id" => $this->user_id, "account" => $deposit])->order("pay_time desc")->find();
        if (!$recharge) {
            return returnBad("订单记录异常，请联系管理员", 308);
        }
        $data      = [
            'order_id'     => $recharge["order_id"],
            'order_sn'     => $recharge["order_sn"],
            'user_id'      => $this->user_id,
            'refund_money' => $deposit,
            'addtime'      => time(),
        ];
        $return_id = M('return_deposit')->add($data);
        return returnOk($return_id);
    }

    //租借记录
    public function getLeaseRecord()
    {
        $where = [
            'user_id'    => $this->user_id,
            'pay_status' => 2
        ];
        $data  = M('power_order')->where($where)->field('pay_time,number,time,pay_price')->select();
        foreach ($data as $k => $value) {
            if (($value['pay_time'] + $value['time'] * 60) >= time()) {

                $data[$k]['status'] = '1';
            } else {
                $data[$k]['status'] = '0';
            }
            $data[$k]['pay_time']     = date('Y-m-d H:i:s', $value['pay_time']);
            $data[$k]['use_time']     = $value['time'];
            $data[$k]['order_amount'] = $value['pay_price'];
        }
        return returnOk($data);
    }

    //绑定银行卡
    public function addBank()
    {
        $data['is_default']  = input('is_default/d', 0);
        $data['bank_name']   = I('post.bank_name'); //银行名称
        $data['card_name']   = I('post.card_name'); //持卡人姓名
        $data['card_num']    = I('post.card_num');//银行卡账号
        $data['create_time'] = time();//创建时间
        $data['user_id']     = $this->user_id;//用户id
        $userBankValidate    = Loader::validate('UserBankCard');
        if (!$userBankValidate->batch()->check($data)) {
            return returnBad($userBankValidate->getError(), 308);
        }
        if (M('user_bank_card')->where(['user_id' => $this->user_id])->where(['card_num' => $data['card_num']])->find()) {
            return returnBad('银行卡不能反复提交！');
        }
        Db::startTrans();
        $result = 0;
        if (!empty($data['is_default'])) {
            $result = M('user_bank_card')->where(['user_id' => $this->user_id])->save(array('is_default' => 0));
        }
        $res = M('user_bank_card')->add($data);
        if (!empty($res) && $result !== false) {
            Db::commit();
            return returnOk('银行卡添加成功！');
        } else {
            Db::rollback();
            return returnBad('银行卡添加失败！');
        }
    }

    //银行卡列表
    public function bankList()
    {
        $bank_lists = db('user_bank_card')->where('user_id', $this->user_id)->order('is_default desc')->select();
        return returnOk($bank_lists);
    }

    //提现协议
    public function agreement()
    {
        $content = M('system_article')->where(['doc_code' => 'agreement'])->getField('doc_content');
        return returnOk($content);
    }

    //绑定手机号码
    public function bang_mobile()
    {
        $username = I('post.username'); //用户真实姓名
        $mobile   = I('post.mobile'); // 手机号码
        if (!$username || !$mobile) {
            $this->ajaxReturn(['code' => '300', 'msg' => '姓名或手机号码不能为空！！']);
            exit();
        }
        $user = $this->user_id;

        $update = M("users")->where(['user_id' => $user])->save(['mobile' => $mobile, 'username' => $username, 'level' => 2]);
        if ($update) {
            return returnOk($update);
        } else {
            return returnBad('网络错误！');
        }
    }

    //分享码
    public function my_ewm()
    {
        vendor('phpqrcode.phpqrcode');
        $user_id = $this->user_id;
        //查询用户是否有生成分享二维码及用户身份是否为酒店，分销商，总代理
        $users = M("users")->where(['user_id' => $user_id])->field('level,ewm')->find();
        if ($users['level'] < 3) {
            return returnBad('身份错误！');
        }
        if ($users['ewm']) {
            $ewm = 'http://' . $_SERVER['HTTP_HOST'] . '/' . $users['ewm'];
        } else {
            //生成分享二维码
            $value                = 'http://' . $_SERVER['HTTP_HOST'] . '/index.php/api/login/index?index=1&pid=' . $user_id; //二维码内容
            $errorCorrectionLevel = 'L';//容错级别
            $matrixPointSize      = 6;//生成图片大小
            $path                 = UPLOAD_PATH . date("Ymd", time()) . '/';
            if (!is_dir($path)) {
                mkdir($path);
            }
            $Object    = new \QRcode();
            $rand      = substr(implode(NULL, array_map('ord', str_split(substr(uniqid(), 7, 13), 1))), 0, 8) . rand(9999, 99999) . $uid;
            $file_name = $path . $rand . 'code.jpg';
            $Object->png($value, $file_name, $errorCorrectionLevel, $matrixPointSize, 2);
            //$insert_id = db("admin_attachment")->insertGetId(array("path"=>$file_name));
            M("users")->where(['user_id' => $user_id])->update(array('ewm' => $file_name));
            $ewm = 'http://' . $_SERVER['HTTP_HOST'] . '/' . $file_name;
        }
        $data = array('ewm' => $ewm);
        return returnOk($data);
    }


//入驻提交资料
    public function settled_in()
    {
        $post = I('post.'); //接收提交信息
        if (empty($post['username'])) {
            return returnBad('真实姓名不能为空！');
        }
        $data['username'] = $post['username'];
        if (empty($post['mobile'])) {
            return returnBad('手机号码不能为空！');
        }
        $data['mobile'] = $post['mobile'];
        if (empty($post['wx_number'])) {
            return returnBad('微信号不能为空！');
        }
        $data['wx_number'] = $post['wx_number'];
        if (empty($post['code_id'])) {
            return returnBad('身份证号码不能为空！');
        }
        $data['code_id'] = $post['code_id'];
        if (empty($post['region'])) {
            return returnBad('请填写区域！');
        }
        $data['region'] = $post['region'];

        $data['type'] = 5;

        $data['user_id'] = $this->user_id;
        //判断用户是否已经提交过审核
        $apply = M("lc_apply")->where(['user_id' => $data['user_id']])->field("status,id")->find();
        if ($apply['status'] == 1) {
            return returnBad('请耐心等待管理员审核吧！');
        }
        //如果有驳回就更新否则添加-驳回状态
        $data['create_time'] = time();
        if ($apply['status'] == 3) {
            $res = M("lc_apply")->where(['user_id' => $data['user_id']])->update($data);
        } else {
            $res = M("lc_apply")->add($data);
        }
        if ($res) {
            return returnOk('资料提交成功,请耐心等待后台审核！！');
        } else {
            return returnBad('网络错误！！');
        }


    }

    //地图获取参数
    public function get_map()
    {
        $url        = I('post.url');
        $pay        = new PayLogic();
        $parameters = $pay->getSignPackage_map($url);
        return returnOk($parameters);
    }


    //查找所有酒店的金纬度
    public function get_tude()
    {
        $lc_apply = M("lc_apply")->where("type=3 AND status=2")->field("jd,wd")->select();
        $level    = M("users")->where(['user_id' => $this->user_id])->value('mobile');
        $config   = tpCache('shop_info');
        $data     = array(
            'mobile'      => $level,
            'list'        => $lc_apply,
            'system_mess' => $config['store_desc'],
        );
        return returnOk($data);
    }

    public function is_vip()
    {
        if (!$this->user_id) {
            return returnBad("请登录", 302);
        }
        $mobile = M("users")->where(['user_id' => $this->user_id])->value('mobile');
        if ($mobile) {
            $type = 1;
        } else {
            $type = 0;
        }
        $data = array('type' => $type);
        return returnOk($data);


    }

}